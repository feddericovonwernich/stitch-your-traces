# Daemon set will set one collector per node in the cluster.
mode: daemonset

image:
  repository: otel/opentelemetry-collector-contrib
  tag: "0.129.1"

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 128Mi

presets:
  hostMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
  logsCollection:
    enabled: true

# Open 8889/TCP on the pod *and* on the Service
ports:
  prometheus:                 # ← name can be anything; must match below
    enabled: true
    containerPort: 8889       # inside the pod
    servicePort: 8889         # exposed by the Service
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318       # inside the pod (default OTLP HTTP port)
    servicePort: 4318         # exposed by the Service
    protocol: TCP
  otlp-grpc:
    enabled: true
    containerPort: 4317       # inside the pod (default OTLP gRPC port)
    servicePort: 4317         # exposed by the Service
    protocol: TCP

# Have Prometheus scrape every agent pod (DaemonSet ⇒ PodMonitor)
podMonitor:
  enabled: true
  metricsEndpoints:
    - port: prometheus
      path: /metrics
      interval: 15s


# ─── Collector configuration ──────────────────────────────────────────────────────────────────────────────────────────
# Everything under `.config` is copied verbatim into the
# generated ConfigMap (key: relay) and becomes /conf/relay.yaml
config:
  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}
    hostmetrics:
      collection_interval: 10s
      scrapers:
        cpu: {}
        filesystem: {}
        memory: {}
    filelog:
      include:
        - /var/log/pods/*/*/*.log
      exclude:
        - /var/log/pods/*/opentelemetry-collector/*.log
      start_at: end
      include_file_path: true
      operators:
        - type: container

  processors:
    # Upsert the resource.service.name from one of those labels
    resource:
      attributes:
        - action: upsert
          key: service.name
          from_attribute: k8s.container.name

    batch: {}

  exporters:

    debug:
      verbosity: detailed

    # ─── metrics ───────────────────────────────────────────────
    prometheus:
      endpoint: "0.0.0.0:8889"
    
    # ─── traces ────────────────────────────────────────────────
    otlphttp/tempo:
      endpoint: "http://observability-tempo-distributor.observability.svc.cluster.local:4318"
      tls:
        insecure: true

    # ─── logs ─────────────────────────────────────────────────
    loki:
      endpoint: "http://observability-loki-gateway.observability.svc.cluster.local/loki/api/v1/push"

  service:
    pipelines:
      
      # Host/Node + OTLP‑ingested metrics
      metrics:
        receivers:  [hostmetrics, otlp]
        processors: [batch]
        exporters:  [prometheus]
      
      # Traces coming in over OTLP
      traces:
        receivers:  [otlp]
        processors: [batch]
        exporters:  [otlphttp/tempo]
      
      # Logs coming in over OTLP and filelog
      logs:
        receivers: [otlp, filelog]
        processors: [resource, batch]
        exporters: [loki, debug]